// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscriptions.proto

package subscriptions

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeRequest struct {
	Subscriber           string   `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Publisher            string   `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18bcb28a8eb272b7, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *SubscribeRequest) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

type SubscribeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18bcb28a8eb272b7, []int{1}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

type GetSubscriptionsRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubscriptionsRequest) Reset()         { *m = GetSubscriptionsRequest{} }
func (m *GetSubscriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionsRequest) ProtoMessage()    {}
func (*GetSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18bcb28a8eb272b7, []int{2}
}

func (m *GetSubscriptionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionsRequest.Unmarshal(m, b)
}
func (m *GetSubscriptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionsRequest.Marshal(b, m, deterministic)
}
func (m *GetSubscriptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionsRequest.Merge(m, src)
}
func (m *GetSubscriptionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionsRequest.Size(m)
}
func (m *GetSubscriptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionsRequest proto.InternalMessageInfo

func (m *GetSubscriptionsRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetSubscriptionsResponse struct {
	Subscriptions        []string `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubscriptionsResponse) Reset()         { *m = GetSubscriptionsResponse{} }
func (m *GetSubscriptionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionsResponse) ProtoMessage()    {}
func (*GetSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18bcb28a8eb272b7, []int{3}
}

func (m *GetSubscriptionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionsResponse.Unmarshal(m, b)
}
func (m *GetSubscriptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionsResponse.Marshal(b, m, deterministic)
}
func (m *GetSubscriptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionsResponse.Merge(m, src)
}
func (m *GetSubscriptionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionsResponse.Size(m)
}
func (m *GetSubscriptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionsResponse proto.InternalMessageInfo

func (m *GetSubscriptionsResponse) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "proto.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "proto.SubscribeResponse")
	proto.RegisterType((*GetSubscriptionsRequest)(nil), "proto.GetSubscriptionsRequest")
	proto.RegisterType((*GetSubscriptionsResponse)(nil), "proto.GetSubscriptionsResponse")
}

func init() {
	proto.RegisterFile("subscriptions.proto", fileDescriptor_18bcb28a8eb272b7)
}

var fileDescriptor_18bcb28a8eb272b7 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x50, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0xa5, 0x8a, 0x62, 0x47, 0x84, 0x35, 0x3d, 0x6c, 0x28, 0xb2, 0x2e, 0x45, 0x71, 0x2f, 0x6e,
	0x41, 0xf1, 0x2a, 0x8b, 0x17, 0xaf, 0xd2, 0xe2, 0xc5, 0x9b, 0xad, 0x03, 0x46, 0x6c, 0x12, 0x33,
	0x89, 0x5f, 0xed, 0x47, 0x08, 0x49, 0x77, 0x4d, 0x77, 0xe9, 0xc9, 0x53, 0xc8, 0x7b, 0xf3, 0xde,
	0x9b, 0x79, 0x90, 0x91, 0x6b, 0xa8, 0x35, 0x42, 0x5b, 0xa1, 0x24, 0x2d, 0xb5, 0x51, 0x56, 0xb1,
	0x03, 0xff, 0x14, 0x4f, 0x30, 0xa9, 0x03, 0xdb, 0x60, 0x85, 0x5f, 0x0e, 0xc9, 0xb2, 0x19, 0x00,
	0xad, 0x31, 0xc3, 0x93, 0x79, 0xb2, 0x48, 0xab, 0x08, 0x61, 0x67, 0x90, 0x6a, 0xd7, 0x7c, 0x0a,
	0x7a, 0x47, 0xc3, 0xf7, 0x3c, 0xfd, 0x07, 0x14, 0x19, 0x9c, 0x46, 0x8e, 0xa4, 0x95, 0x24, 0x2c,
	0xee, 0x60, 0xfa, 0x88, 0xb6, 0x8e, 0xf7, 0x58, 0xa7, 0xe5, 0x70, 0xe4, 0x08, 0x8d, 0x7c, 0xed,
	0xb0, 0xcf, 0xda, 0xfc, 0x8b, 0x15, 0xf0, 0x5d, 0x59, 0xb0, 0x64, 0x17, 0x70, 0x32, 0xb8, 0x8b,
	0x27, 0xf3, 0xfd, 0x45, 0x5a, 0x0d, 0xc1, 0x9b, 0x9f, 0x04, 0xb2, 0x58, 0x5f, 0xa3, 0xf9, 0x16,
	0x2d, 0xb2, 0x7b, 0x48, 0x37, 0x5b, 0xb2, 0x69, 0xe8, 0x64, 0xb9, 0xdd, 0x44, 0xce, 0x77, 0x89,
	0x3e, 0x7d, 0x05, 0xc7, 0xcf, 0x92, 0xfe, 0xe3, 0x50, 0xc3, 0x64, 0xfb, 0x36, 0x36, 0xeb, 0xa7,
	0x47, 0xba, 0xca, 0xcf, 0x47, 0xf9, 0x60, 0xfa, 0x70, 0xf5, 0x72, 0xf9, 0x46, 0xd7, 0xda, 0xa8,
	0x0f, 0x6c, 0x6d, 0xd9, 0xaa, 0xae, 0x53, 0xb2, 0xf4, 0x9a, 0x72, 0xd0, 0x4b, 0x73, 0xe8, 0xc1,
	0xdb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x71, 0x13, 0x02, 0x1c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/proto.SubscriptionService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/proto.SubscriptionService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/proto.SubscriptionService/GetSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
type SubscriptionServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
}

// UnimplementedSubscriptionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (*UnimplementedSubscriptionServiceServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedSubscriptionServiceServer) Unsubscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (*UnimplementedSubscriptionServiceServer) GetSubscriptions(ctx context.Context, req *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}

func RegisterSubscriptionServiceServer(s *grpc.Server, srv SubscriptionServiceServer) {
	s.RegisterService(&_SubscriptionService_serviceDesc, srv)
}

func _SubscriptionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubscriptionService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubscriptionService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubscriptionService/GetSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _SubscriptionService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _SubscriptionService_GetSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriptions.proto",
}
